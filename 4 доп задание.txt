#include <stdio.h>
#include <stdlib.h>
#include <locale.h>

// узел бинарного дерева
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

struct Node* root = NULL;

struct Node* CreateTree(struct Node* root, struct Node* r, int data) { // функция создания дерева
    if (r == NULL) {
        r = (struct Node*)malloc(sizeof(struct Node));
        if (r == NULL) {
            printf("Ошибка выделения памяти\n");
            exit(0);
        }

        r->left = NULL;
        r->right = NULL;
        r->data = data;
        if (root == NULL) return r;

        if (data > root->data) root->left = r;
        else root->right = r;
        return r;
    }

    if (data > r->data)
        CreateTree(r, r->left, data);
    else
        CreateTree(r, r->right, data);

    return root;
}

void print_tree(struct Node* r, int l) // функция вывода дерева на экран
{
    if (r == NULL) {
        return;
    }

    print_tree(r->right, l + 1);
    for (int i = 0; i < l; i++) {
        printf(" ");
    }
    printf("%d\n", r->data);
    print_tree(r->left, l + 1);
}

int find(struct Node* root, int data, int level) {
    if (root == NULL) {
        return -1;
    }

    if (root->data == data) {
        int leftLevel = find(root->left, data, level + 1);
        int rightLevel = find(root->right, data, level + 1);
        
        if (leftLevel == -1 && rightLevel == -1) {
            return level;
        }
        
        int maxLevel = (leftLevel > rightLevel ? leftLevel : rightLevel);
        return (maxLevel == -1 ? level : maxLevel);
    }

    int leftLevel = find(root->left, data, level + 1);
    if (leftLevel != -1) {
        return leftLevel;
    }

    return find(root->right, data, level + 1);
}

int count(struct Node* root, int data, int cnt) { // функция для подсчета количества элемента
    if (root->data == data) cnt++;
    if (root->data >= data && root->right != NULL) cnt = count(root->right, data, cnt);
    else if (root->left != NULL)  cnt = count(root->left, data, cnt);
    return cnt;
}

int main() {
    setlocale(LC_ALL, "Rus");
    int D, number, start = 1;

    printf("-1 - окончание построения дерева\n");
    while (start) {
        printf("Введите число: ");
        scanf("%d", &D);
        if (D == -1) {
            printf("Построение дерева окончено\n\n");
            start = 0;
        } else {
            root = CreateTree(root, root, D);
        }
    }

    print_tree(root, 0);
    printf("Введи значение number: ");
    scanf("%d", &number);

    int cnt = count(root, number, 0);
    printf("%d раз(а)\n", cnt);

   
    int level = find(root, number, 0);
    if (level != -1) {
        printf("Последнее вхождение элемента %d находится на уровне %d\n", number, level);
    } else {
        printf("Элемент не найден\n");
    }

    scanf("%d", &D);
    return 0;
}
